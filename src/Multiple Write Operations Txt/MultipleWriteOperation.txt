/**
 * when multiple data write operations this time either All success or All failure and this is called Atomic Unit.
 * for this Atomic Unit need Transaction and Rollback operations
 *when use Transaction and Rollback operations this time use tryCatch block and in this block need write Transaction and Rollback operations code like that session.startTransaction() commit transaction=> session.commitTransaction() and end transaction=> session.endTransaction() and if have any error => write in catch block and in this  catch block we need to write About Transaction=> session.aboutTransaction() if our transaction is not successful, About Transaction back to this all of data and its not create anything .
 * why we use Transaction and Rollback
 *ACID properties are a set of fundamental characteristics that ensure reliable and consistent transaction processing in database  management systems. The terms "ACID" stands for Atomicity, Consistency, Isolation, and Durability. These properties define the behavior and guarantees provided by the transaction.
 *  ** Atomicity: Transaction are treated as indivisible units, ensuring that all operation within a Transaction are either fully completed or not executed at all.
 *  ** Consistency: Transaction bring the database from one valid state to another,adhering to integrity constraints and business rules,ensuring data integrity.
 *  ** Isolation: Concurrent transactions executed independently,preventing interference or conflict and maintaining data integrity even in a multi-user environment.
 *  ** Durability: Committed transaction changes are permanent and survive system failures, ensuring that data is reliably stored and can be recovered in case of disruption.
 *
 *
 */

// import mongoose, { Schema } from 'mongoose';

// // user model fields
// const userModel = new Schema<any>({
//   id: {
//     type: String,
//     required: true,
//     unique: true,
//   },
//   role: {
//     type: String,
//     required: true,
//   },
//   password: {
//     type: String,
//     required: true,
//   },
//   student: {
//     type: Schema.Types.ObjectId,
//     ref: 'student',
//   },
//   faculty: {
//     type: Schema.Types.ObjectId,
//     ref: 'faculty',
//   },
//   Admin: {
//     type: Schema.Types.ObjectId,
//     ref: 'admin',
//   },
// });

// // student model
// const studentModel = new Schema<any>({
//   title: {
//     type: String,
//     required: true,
//     unique: true,
//   },
//   academicFaculty: {
//     type: Schema.Types.ObjectId,
//     ref: 'academicFaculty',
//     required: true,
//   },
//   academicDepartment: {
//     type: Schema.Types.ObjectId,
//     ref: 'academicDepartment',
//     required: true,
//   },
//   academicSemester: {
//     type: Schema.Types.ObjectId,
//     ref: 'academicSemester',
//     required: true,
//   },
// });

// const createMultiUser = async (student: { id: any }, user: { id: any }) => {
//   // this is create for populate data student and user
//   let newUserAllData = null;
//   const session = await mongoose.StartSession();
//   try {
//     session.startTransaction();
//     const id = generateStudentId(academicSemester);
//     user.id = id;
//     student.id = id;

//     // create student and this is an array
//     const createStudent = await student.create([student], { session });
//     if (!createStudent.length) {
//       throw new Error('Failed to create student');
//     }

//     // now add this create student id into user
//     user.student = createStudent[0]._id;

//     const userCreate = await User.create([user], { session });

//     if (!userCreate.length) {
//       throw new Error('Failed to create user');
//     }
//     newUserAllData = userCreate[0];

//     await session.commitTransaction();
//     await session.endTransaction();
//   } catch (error) {
//     await session.abortTransaction(); // if have any errors
//     await session.endTransaction();
//     throw error;
//   }

//   if (newUserAllData) {
//     newUserAllData = await User.findOne({ id: newUserAllData.id }).populate({
//       path: 'student',
//       populate: [
//         {
//           path: 'academicSemester',
//         },
//         {
//           path: 'academicDepartment',
//         },
//         {
//           path: 'academicFaculty',
//         },
//       ],
//     });
//   }
//   return newUserAllData;
// };

// export const multiUserOperation = {
//   createMultiUser,
// };
